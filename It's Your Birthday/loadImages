import PhotosUI
import Photos
import UIKit

func loadImages(from photoItems: [PhotosPickerItem]) -> [UIImage] {
    var images: [UIImage] = []

    for photoItem in photoItems {
        if let assetIdentifier = photoItem.itemIdentifier {
            let fetchResult = PHAsset.fetchAssets(withLocalIdentifiers: [assetIdentifier], options: nil)

            if let asset = fetchResult.firstObject {
                let requestOptions = PHImageRequestOptions()
                requestOptions.isSynchronous = true

                PHImageManager.default().requestImage(for: asset, targetSize: PHImageManagerMaximumSize, contentMode: .default, options: requestOptions) { (image, _) in
                    if let image = image {
                        images.append(image)
                    }
                }
            }
        }
    }

    return images
}

///////
import PhotosUI
import Photos
import UIKit

func loadImages(from photoItems: [PhotosPickerItem], completion: @escaping ([UIImage]) -> Void) {
    var images: [UIImage] = []
    let dispatchGroup = DispatchGroup()

    for photoItem in photoItems {
        dispatchGroup.enter()

        if let assetIdentifier = photoItem.itemIdentifier {
            let fetchResult = PHAsset.fetchAssets(withLocalIdentifiers: [assetIdentifier], options: nil)

            if let asset = fetchResult.firstObject {
                let requestOptions = PHImageRequestOptions()
                requestOptions.isSynchronous = false

                PHImageManager.default().requestImage(for: asset, targetSize: PHImageManagerMaximumSize, contentMode: .default, options: requestOptions) { (image, _) in
                    if let image = image {
                        images.append(image)
                    }

                    dispatchGroup.leave()
                }
            } else {
                dispatchGroup.leave()
            }
        } else {
            dispatchGroup.leave()
        }
    }

    dispatchGroup.notify(queue: DispatchQueue.main) {
        completion(images)
    }
}
