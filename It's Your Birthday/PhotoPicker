import SwiftUI
import PhotosUI

// Define a custom struct to hold photo information
struct Photos {
    var name: String
    var width: Int
    var height: Int
    var dataSize: Int // in kilobytes
    var dateCreated: Date
}

// Function to convert an array of PhotoPickerItem to an array of Photos
func convertToPhotos(photoPickerItems: [PhotoPickerItem]) -> [Photos] {
    var photosArray: [Photos] = []

    for photoPickerItem in photoPickerItems {
        // Access properties of PhotoPickerItem using the imported PhotoUI framework
        let name = photoPickerItem.identifier
        let width = photoPickerItem.imageData?.width ?? 0 // Replace with the actual property from PhotoPickerItem
        let height = photoPickerItem.imageData?.height ?? 0 // Replace with the actual property from PhotoPickerItem
        let dataSize = photoPickerItem.imageData?.count ?? 0 / 1024 // Convert bytes to kilobytes
        let dateCreated = photoPickerItem.dateCreated ?? Date()  // Replace with the actual property from PhotoPickerItem

        // Create a Photos instance and append it to the array
        let photo = Photos(name: name, width: width, height: height, dataSize: dataSize, dateCreated: dateCreated)
        photosArray.append(photo)
    }

    return photosArray
}

// Example usage
let photoPickerItems: [PhotoPickerItem] = []  // Replace with your actual array of PhotoPickerItem
let photosArray = convertToPhotos(photoPickerItems: photoPickerItems)

// Now, photosArray contains an array of Photos structs with the desired properties
